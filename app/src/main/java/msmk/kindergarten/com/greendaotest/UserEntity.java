package msmk.kindergarten.com.greendaotest;import org.greenrobot.greendao.DaoException;import org.greenrobot.greendao.annotation.Entity;import org.greenrobot.greendao.annotation.Generated;import org.greenrobot.greendao.annotation.Id;import org.greenrobot.greendao.annotation.NotNull;import org.greenrobot.greendao.annotation.ToMany;import org.greenrobot.greendao.annotation.ToOne;import java.util.List;/** * Created by a5yearge on 2018/5/24. */@Entitypublic class UserEntity {    @Id    private long userId;    private String name;    private String tel;    private long optionId;    @ToOne(joinProperty = "optionId")    private UserOption option;    @ToMany(referencedJoinProperty = "userId")    private List<StudyType> studyTypeList;    /** Used to resolve relations */    @Generated(hash = 2040040024)    private transient DaoSession daoSession;    /** Used for active entity operations. */    @Generated(hash = 1814575071)    private transient UserEntityDao myDao;    @Generated(hash = 1595881196)    public UserEntity(long userId, String name, String tel, long optionId) {        this.userId = userId;        this.name = name;        this.tel = tel;        this.optionId = optionId;    }    @Generated(hash = 1433178141)    public UserEntity() {    }    @Generated(hash = 1567712617)    private transient Long option__resolvedKey;    @Override    public String toString() {        return "UserEntity{" +                "userId=" + userId +                ", name='" + name + '\'' +                ", tel='" + tel + '\'' +                ", optionId=" + optionId +                ", option=" + option +                ", studyTypeList=" + studyTypeList +                ", daoSession=" + daoSession +                ", myDao=" + myDao +                ", option__resolvedKey=" + option__resolvedKey +                '}';    }    public long getUserId() {        return this.userId;    }    public void setUserId(long userId) {        this.userId = userId;    }    public String getName() {        return this.name;    }    public void setName(String name) {        this.name = name;    }    public String getTel() {        return this.tel;    }    public void setTel(String tel) {        this.tel = tel;    }    public long getOptionId() {        return this.optionId;    }    public void setOptionId(long optionId) {        this.optionId = optionId;    }    /** To-one relationship, resolved on first access. */    @Generated(hash = 603702289)    public UserOption getOption() {        long __key = this.optionId;        if (option__resolvedKey == null || !option__resolvedKey.equals(__key)) {            final DaoSession daoSession = this.daoSession;            if (daoSession == null) {                throw new DaoException("Entity is detached from DAO context");            }            UserOptionDao targetDao = daoSession.getUserOptionDao();            UserOption optionNew = targetDao.load(__key);            synchronized (this) {                option = optionNew;                option__resolvedKey = __key;            }        }        return option;    }    /** called by internal mechanisms, do not call yourself. */    @Generated(hash = 947060528)    public void setOption(@NotNull UserOption option) {        if (option == null) {            throw new DaoException(                    "To-one property 'optionId' has not-null constraint; cannot set to-one to null");        }        synchronized (this) {            this.option = option;            optionId = option.getOptionId();            option__resolvedKey = optionId;        }    }    /**     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.     * Entity must attached to an entity context.     */    @Generated(hash = 128553479)    public void delete() {        if (myDao == null) {            throw new DaoException("Entity is detached from DAO context");        }        myDao.delete(this);    }    /**     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.     * Entity must attached to an entity context.     */    @Generated(hash = 1942392019)    public void refresh() {        if (myDao == null) {            throw new DaoException("Entity is detached from DAO context");        }        myDao.refresh(this);    }    /**     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.     * Entity must attached to an entity context.     */    @Generated(hash = 713229351)    public void update() {        if (myDao == null) {            throw new DaoException("Entity is detached from DAO context");        }        myDao.update(this);    }    /** Resets a to-many relationship, making the next get call to query for a fresh result. */    @Generated(hash = 1887955387)    public synchronized void resetStudyTypeList() {        studyTypeList = null;    }    /**     * To-many relationship, resolved on first access (and after reset).     * Changes to to-many relations are not persisted, make changes to the target entity.     */    @Generated(hash = 1657311275)    public List<StudyType> getStudyTypeList() {        if (studyTypeList == null) {            final DaoSession daoSession = this.daoSession;            if (daoSession == null) {                throw new DaoException("Entity is detached from DAO context");            }            StudyTypeDao targetDao = daoSession.getStudyTypeDao();            List<StudyType> studyTypeListNew = targetDao._queryUserEntity_StudyTypeList(userId);            synchronized (this) {                if (studyTypeList == null) {                    studyTypeList = studyTypeListNew;                }            }        }        return studyTypeList;    }    /** called by internal mechanisms, do not call yourself. */    @Generated(hash = 287999134)    public void __setDaoSession(DaoSession daoSession) {        this.daoSession = daoSession;        myDao = daoSession != null ? daoSession.getUserEntityDao() : null;    }}